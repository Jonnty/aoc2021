{"version":3,"sources":["days/day3.ts"],"names":["toBitField","s","split","map","b","parseInt","add","tally","bf","i","t","binToDec","reverse","reduce","a","bitTallies","bitfields","Array","length","fill","mostCommonBits","leastCommonBits","rating","winningBits","winners","filter","position","filterBitfield","console","log","Error","day3","input","stringList","part1","gamma","epsilon","toString","part2","oxyRating","co2Rating"],"mappings":"2KAGA,SAASA,EAAWC,GAChB,OAAOA,EAAEC,MAAM,IAAIC,KAAI,SAAAC,GAAC,OAAIC,SAASD,MAGzC,SAASE,EAAIC,EAAiBC,EAAcC,GACxC,OAAS,GAALA,EAEOF,EAAMJ,KAAI,SAACO,EAAGD,GAAJ,OAAUD,EAAGC,GAAK,GAAK,KAErCF,EAAMJ,KAAI,SAACO,EAAGD,GAAJ,OAAUC,GAAKF,EAAGC,GAAK,GAAK,MAGjD,SAASE,EAASH,GACd,OAAOI,kBAAQJ,GAAIL,KAAI,SAACC,EAAGK,GAAJ,OAAUL,EAAC,SAAG,EAAKK,MAAGI,QAAO,SAACC,EAAGV,GAAJ,OAAUU,EAAIV,KAOtE,SAASW,EAAWC,GAChB,OAAOA,EAAUH,OAAOP,EAAK,IAAIW,MAAMD,EAAU,GAAGE,QAAQC,KAAK,IAGrE,SAASC,EAAeJ,GACpB,OAAOD,EAAWC,GAAWb,KAAI,SAAAI,GAAK,OAAIA,GAAS,EAAI,EAAI,KAG/D,SAASc,EAAgBL,GACrB,OAAOD,EAAWC,GAAWb,KAAI,SAAAI,GAAK,OAAIA,GAAS,EAAI,EAAI,KAO/D,SAASe,EAAON,EAAuBO,GAEnC,IADA,IAAIC,EAAO,YAAOR,GADuE,WAEhFP,GAGL,GAFAe,EAAUA,EAAQC,QAAO,SAAAjB,GAAE,OAPnC,SAAwBA,EAAce,EAAuBG,GACzD,OAAOlB,EAAGkB,KAAcH,EAAYG,GAMDC,CAAenB,EAAIe,EAAYC,GAAUf,MACxEmB,QAAQC,IAAIL,EAASf,GACC,GAAlBe,EAAQN,OACR,MAAM,CAAN,EAAOM,EAAQ,KAJdf,EAAI,EAAGA,EAAIO,EAAU,GAAGE,OAAQT,IAAK,CAAC,IAAD,IAArCA,GAAqC,kCAO9C,MAAMqB,MAAM,oBAAsBN,GAI/B,SAASO,EAAKC,GACjB,IAAMhB,EAAYiB,YAAWD,GAAO7B,IAAIH,GAgBxC,MAAO,CAAEkC,MAdT,WACI,IAAMC,EAAQf,EAAeJ,GACvBoB,EAAcD,EArCdhC,KAAI,SAAAC,GAAC,OAAIA,EAAI,EAAI,KAsCvB,OAAOO,EAASwB,GAASxB,EAASyB,GAWtBF,GAAQG,WAAYC,MARpC,WACIV,QAAQC,IAAI,OACZ,IAAMU,EAAYjB,EAAON,EAAWI,GACpCQ,QAAQC,IAAI,OACZ,IAAMW,EAAYlB,EAAON,EAAWK,GACpC,OAAOV,EAAS4B,GAAa5B,EAAS6B,GAGCF,GAAQD","file":"static/js/3.5a1c3620.chunk.js","sourcesContent":["import { reverse } from \"lodash\";\nimport { Parts, stringList } from \"../utils\";\n\nfunction toBitField(s: string) {\n    return s.split(\"\").map(b => parseInt(b));\n}\n\nfunction add(tally: number[], bf: number[], i: number) {\n    if (i == 0) {\n        //tally is first bit, not running total\n        return tally.map((t, i) => bf[i] ? 1 : -1);\n    }\n    return tally.map((t, i) => t + (bf[i] ? 1 : -1));\n}\n\nfunction binToDec(bf: number[]): number {\n    return reverse(bf).map((b, i) => b * 2 ** i).reduce((a, b) => a + b);\n}\n\nfunction not(bf: number[]): number[] {\n    return bf.map(b => b ? 0 : 1);\n}\n\nfunction bitTallies(bitfields: number[][]): number[] {\n    return bitfields.reduce(add, new Array(bitfields[0].length).fill(0));\n}\n\nfunction mostCommonBits(bitfields: number[][]): number[] {\n    return bitTallies(bitfields).map(tally => tally >= 0 ? 1 : 0);\n}\n\nfunction leastCommonBits(bitfields: number[][]): number[] {\n    return bitTallies(bitfields).map(tally => tally >= 0 ? 0 : 1);\n}\n\nfunction filterBitfield(bf: number[], winningBits: number[], position: number): boolean {\n    return bf[position] === winningBits[position];\n}\n\nfunction rating(bitfields: number[][], winningBits: (bfs: number[][]) => number[]): number[] {\n    let winners = [...bitfields];\n    for (let i = 0; i < bitfields[0].length; i++) {\n        winners = winners.filter(bf => filterBitfield(bf, winningBits(winners), i));\n        console.log(winners, i);\n        if (winners.length == 1) {\n            return winners[0];\n        }\n    }\n    throw Error(\"no nice solution \" + winners);\n}\n\n\nexport function day3(input: string): Parts {\n    const bitfields = stringList(input).map(toBitField);\n\n    function part1(): number {\n        const gamma = mostCommonBits(bitfields);\n        const epsilon = not(gamma);\n        return binToDec(gamma) * binToDec(epsilon);\n    }\n\n    function part2(): number {\n        console.log(\"oxy\");\n        const oxyRating = rating(bitfields, mostCommonBits);\n        console.log(\"co2\");\n        const co2Rating = rating(bitfields, leastCommonBits);\n        return binToDec(oxyRating) * binToDec(co2Rating);\n    }\n\n    return { part1: part1().toString(), part2: part2().toString() };\n}"],"sourceRoot":""}