{"version":3,"sources":["days/day2.ts"],"names":["commandsToVector","forward","position","depth","aim","depthMultiplier","down","up","add","v1","v2","addPart2","deltaDepth","undefined","day2","input","commands","stringList","map","s","split","direction","size","n","times","parseInt","part1","result","reduce","toString","part2"],"mappings":"mKASMA,EAAkD,CACtDC,QAAS,CAAEC,SAAU,EAAGC,MAAO,EAAGC,IAAK,EAAGC,gBAAiB,GAC3DC,KAAM,CAAEJ,SAAU,EAAGC,MAAO,EAAGC,IAAK,GACpCG,GAAI,CAAEL,SAAU,EAAGC,OAAQ,EAAGC,KAAM,IAkBtC,SAASI,EAAIC,EAAYC,GACvB,MAAO,CACLR,SAAUO,EAAGP,SAAWQ,EAAGR,SAC3BC,MAAOM,EAAGN,MAAQO,EAAGP,MACrBC,IAAKK,EAAGL,IAAMM,EAAGN,KAIrB,SAASO,EAASF,EAAYC,GAC5B,IAAME,OAAoCC,IAAvBH,EAAGL,gBAAgC,EAAGI,EAAGL,IAAMM,EAAGL,gBACrE,MAAO,CACLH,SAAUO,EAAGP,SAAWQ,EAAGR,SAC3BC,MAAOM,EAAGN,MAAQS,EAClBR,IAAKK,EAAGL,IAAMM,EAAGN,KAId,SAASU,EAAKC,GACnB,IAAMC,EAAsBC,YAAWF,GAtBpCG,KAAI,SAAAC,GAAC,OAAIA,EAAEC,MAAM,UACjBF,KAAI,mCAAEG,EAAF,KAAaC,EAAb,YAZT,WAAkEC,GAAY,IAA7DrB,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,MAAOC,EAA2C,EAA3CA,IAAKC,EAAsC,EAAtCA,gBACrC,MAAO,CACLH,SAAUA,EAAWqB,EACrBpB,MAAOA,EAAQoB,EACfnB,IAAKA,EAAMmB,EACXlB,qBAAqCQ,IAApBR,OAAgCQ,EAAYR,EAAkBkB,GAOnDC,CAAMxB,EAAiBqB,GAAYI,SAASH,OAiC1E,MAAO,CAAEI,MAVT,WACE,IAAMC,EAASX,EAASY,OAAOpB,GAC/B,OAAOmB,EAAOzB,SAAWyB,EAAOxB,MAQlBuB,GAAQG,WAAYC,MALpC,WACE,IAAMH,EAASX,EAASY,OAAOjB,GAC/B,OAAOgB,EAAOzB,SAAWyB,EAAOxB,MAGS2B,GAAQD","file":"static/js/2.e0359b46.chunk.js","sourcesContent":["import { Parts, stringList } from \"../utils\";\n\ninterface Vector {\n  position: number\n  depth: number\n  aim: number\n  depthMultiplier?: number\n}\n\nconst commandsToVector: { [command: string]: Vector } = {\n  forward: { position: 1, depth: 0, aim: 0, depthMultiplier: 1 },\n  down: { position: 0, depth: 1, aim: 1 },\n  up: { position: 0, depth: -1, aim: -1 }\n}\n\nfunction times({ position, depth, aim, depthMultiplier }: Vector, n: number) {\n  return {\n    position: position * n,\n    depth: depth * n,\n    aim: aim * n,\n    depthMultiplier: depthMultiplier === undefined ? undefined : depthMultiplier * n\n  };\n}\n\nfunction vectorList(strings: string[]): Vector[] {\n  return strings\n    .map(s => s.split(/\\s+/))\n    .map(([direction, size]) => times(commandsToVector[direction], parseInt(size)))\n}\n\nfunction add(v1: Vector, v2: Vector): Vector {\n  return {\n    position: v1.position + v2.position,\n    depth: v1.depth + v2.depth,\n    aim: v1.aim + v2.aim\n  }\n}\n\nfunction addPart2(v1: Vector, v2: Vector): Vector {\n  const deltaDepth = v2.depthMultiplier === undefined ? 0 :v1.aim * v2.depthMultiplier\n  return {\n    position: v1.position + v2.position,\n    depth: v1.depth + deltaDepth,\n    aim: v1.aim + v2.aim\n  }\n}\n\nexport function day2(input: string): Parts {\n  const commands = vectorList(stringList(input));\n\n  function part1(): number {\n    const result = commands.reduce(add);\n    return result.position * result.depth;\n  }\n\n  function part2(): number {\n    const result = commands.reduce(addPart2);\n    return result.position * result.depth;\n  }\n\n  return { part1: part1().toString(), part2: part2().toString() };\n}"],"sourceRoot":""}